/**
  * copyright (c) 2008 Amrita-Forward - Giampietro Zedda 2008   Turin (ITALY)
 */
package forward;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Iterator;



/**
 * ForwardDbResultSet
 * 
 * This class handles all operation on a single
 * resultset, generated by a provided Sql statement.
 * To the user of this class is returned an AbstractList
 * containing, for each row, an AbstractList of ForwardDbItemValue
 * objects. In this way, to the application, it's returned a matrix
 * of formatted item vaue.
 * It's possible to obtain a singol cell value too, or getting 
 * current row data thru the original resultset or, at the end,
 * get an instance of ForwardDbTableRow of the current row.
 * Notice that this class manages data at logic level and so returns
 * data already in a formatted Java type.
 * 
 * 
 * @date 02-10-2008
 * @version 1.0 
 * @author Giampietro Zedda
 *
  */
@SuppressWarnings({ "unchecked", "unused" })

public class ForwardDbResultSet {
	private java.sql.ResultSet rs;
	private String sqlStmt;
	private ForwardDbConnection dbcn;
	private ResultSetMetaData rsmd;
	private int rowsMax = 0;
	private int rowsCount = 0;	
	private int rowCur = -1;
	
	private AbstractList abl_DbRows = null;          // Each element contains a row, an abl_DbItemValue object
	private AbstractList abl_DbItemValue = null;     // Each element contains a database item value
	private AbstractList abl_ItemDescriptor = null;  // Each element contains a database item descriptor
	
	private ForwardDbTableRow[] oa_DbTableRow;
	/**
	 * Constructor
	 */
	public ForwardDbResultSet(ForwardDbConnection dbcn, String sqlStmt, int rowsMax) {
		this.dbcn = dbcn;
		this.sqlStmt = sqlStmt;
		this.rowsMax = rowsMax;
	
	}
	/**
	 * Constructor 2
	 */
	public ForwardDbResultSet(ForwardDbConnection dbcn, String sqlStmt, int rowsMax, AbstractList abl_ItemDescriptor) {
		this(dbcn, sqlStmt, rowsMax);
		this.abl_ItemDescriptor = abl_ItemDescriptor;
	}

	/**
	 * Constructor 3
	 */
	public ForwardDbResultSet(ForwardDbConnection dbcn, String sqlStmt) {
		this(dbcn, sqlStmt, 0);
	}

	/**
	 * Constructor 4
	 */
	public ForwardDbResultSet(ForwardDbConnection dbcn, String sqlStmt, AbstractList abl_ItemDescriptor) {
		this(dbcn, sqlStmt, 0);
		this.abl_ItemDescriptor = abl_ItemDescriptor;
	}

	/**
	 * createResultSet
	 * 
	 * The ResultSet will be created from the sql statement provided
	 * by contstructor.
	 * 
	 * @return ResultSet
	 * 
	 */
	public ResultSet createResultSet(){
		Connection conn = dbcn.getDbConnection();
		Statement st;
		try {
			st = conn.createStatement();
			rs = st.executeQuery(sqlStmt);     // Yield ResultSet
	        rsmd = rs.getMetaData();           // To obtain ResultSet informations
	        rowsCount = rsmd.getColumnCount();
	        // Bypass if structure pointer supplied by constructor
	        if (abl_ItemDescriptor == null) {
	        	abl_ItemDescriptor	= getStructure();   // Structure of columns
			}
			 
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return rs;
	}

	/**
	 * getFirst
	 * 
	 * Make the first row the current position.
	 * 
	 * 
	 */
	public boolean First(){
		try {
			return rs.first();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * getNext
	 * 
	 * Make the next row the current position.
	 * 
	 */
	public boolean Next(){
		boolean bRet;
		try {
			return rs.next();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	
	/**
	 * getLast
	 * 
	 * Make the last row the current position.
	 * 
	 */
	public boolean Last(){
		try {
			return rs.last();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * getPrev
	 * 
	 * Make the prev row the current position.
	 * 
	 */
	public boolean Prev(){
		try {
			return rs.previous();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * getRow
	 * 
	 * Returns a single row of the array of ForwardDbTableRow 
	 * with all items described inside by ForwardDbItemValue
	 * 
	 * 
	 */
	public ForwardDbItemValue[] getRow(int rowNum){
		
		try {
			rs.absolute(rowNum);
			
		} catch (SQLException e) {
			return null;
		}
		
	    return null;
	
	}
	
	/**
	 * getRows
	 * 
	 * Returns an array of ForwardDbTableRow with all row items
	 * described inside by ForwardDbItemValue
	 * 
	 * 
	 */
	public ForwardDbTableRow[] getRows(){
	    return oa_DbTableRow;
	
	}
	
	/**
	 * @return the rowsCount
	 */
	public int getRowsCount() {
		return rowsCount;
	}
	/**
	 * @return the rowsMax
	 */
	public int getRowsMax() {
		return rowsMax;
	}

	/**
	 * getRowsArray
	 * 
	 * Returns an Array of ForwardDbTableRow objects.
	 * All the resultset is returned to caller.
	 * 
	 * @return ForwardDbTableRow[]
	 */
	public ForwardDbTableRow[] getRowArray(){
		ForwardDbTableRow[] a_ForwardDbTableRow = null;

		// Scan resultset
		try {
			rs.first();
			while (!rs.next()) {
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	    return a_ForwardDbTableRow;
	
	}

	/**
	 * getItemValueArray
	 * 
	 * Returns an array with item values of a recordset roow
	 * 
	 * @return ForwardDbItemValue[][]
	 */
	public ForwardDbItemValue[] getItemValueArray(int rowNum){
		ForwardDbItemValue a_DbItemValue[] = null;
	    
		
		return a_DbItemValue;
	
	}

	
	/**
	 * getItemValueMatrix
	 * 
	 * Returns a two dimension matrix where each cell points to
	 * ForwardDbItemValue instance.
	 * 
	 * @return ForwardDbItemValue[][]
	 */
	public ForwardDbItemValue[][] getItemValueMatrix(){
		ForwardDbItemValue a_DbItemValue[][] = null;
	    return a_DbItemValue;
	
	}
	
	/**
	 * getItemValueAt
	 * 
	 * Returns a specific item value at row and column as
	 * a ForwardDbItemValue object.
	 * 
	 * @return ForwardDbItemValue[][]
	 */
	public ForwardDbItemValue[][] getItemValueAt(int row, int col){
		ForwardDbItemValue a_DbItemValue[][] = null;
	    return a_DbItemValue;
	
	}

	
	
	/**
	 * getStructure
	 * 
	 * Returns an Array of ForwardDbItemDescriptor
	 * with the ResultSet structure, column by column.
	 * 
	 * @return ForwardDbItemDescriptor[]
	 */
	public AbstractList getStructure(){
		// First, put the structure into am abstractList
		
		abl_ItemDescriptor = new ArrayList();
		ForwardDbItemDescriptor oDbItemDescriptor;
		
	    String sqlTableOwner;
	    String sqlColumnTypeName;
	    String sqlColumnLabel;
	    String sqlColumnName;
	    
	    int sqlColumnType;
	    int sqlColumnNumInt;
	    int sqlColumnNumDec;
	    int sqlColumnLng;

		try {
			rsmd = rs.getMetaData();
	        int colonne = rsmd.getColumnCount();
	        
	        // Scan columns
	        for (int i=0; i<colonne; i++){
	        	int j = i+1;
	        	// Extract item informations
	        	sqlColumnType = rsmd.getColumnType(j);
	        	sqlColumnTypeName = rsmd.getColumnTypeName(j);
	        	sqlColumnLabel = rsmd.getColumnLabel(j);
	        	sqlColumnName = rsmd.getColumnName(j);  
	        	sqlColumnLng = rsmd.getPrecision(j); 
	        	sqlColumnNumInt = rsmd.getPrecision(j);  
	        	sqlColumnNumDec = rsmd.getScale(j);  
	        	sqlTableOwner = rsmd.getTableName(j);
	        	
	            // Store 
	        	oDbItemDescriptor = new ForwardDbItemDescriptor();
	        	oDbItemDescriptor.setTableOwner(sqlTableOwner);
	        	oDbItemDescriptor.setColumnTypeSql(sqlColumnType);
	        	oDbItemDescriptor.setColumnTypeSqlName(sqlColumnTypeName);
	        	oDbItemDescriptor.setColumnLabel(sqlColumnLabel);
	        	oDbItemDescriptor.setColumnName(sqlColumnName);
	        	oDbItemDescriptor.setColumnLng(sqlColumnLng);
	        	oDbItemDescriptor.setColumnNumInt(sqlColumnNumInt);
	        	oDbItemDescriptor.setColumnNumDec(sqlColumnNumDec);
	        	
	        	// Add to collection
	        	abl_ItemDescriptor.add(oDbItemDescriptor);
	        }
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
		
	    return abl_ItemDescriptor;
	}

	/**
	 * getCurValues
	 * 
	 * Returns an Array of ForwardDbItemValue acoording
	 * to Sql Column Type.
	 * 
	 * @return ForwardDbItemValue[]
	 */
	public ForwardDbItemValue[] getItemValues(){
		ForwardDbItemValue oa_DbItemValue[] = new ForwardDbItemValue[rowsCount];
		ForwardDbItemValue oDbItemValue = null;
        int i = 0;
        int j = 0;
        int iValue = 0;
        long lValue = 0;
        double dValue = 0;
        float fValue = 0;
        boolean bValue = false;
        char cValue;
        BigDecimal bdValue;
        Date dtValue;
        Time tmValue;
        Timestamp tsValue;

        String sValue = "";

        for (Iterator iterator = abl_ItemDescriptor.iterator(); iterator.hasNext();) {
			ForwardDbItemDescriptor o = (ForwardDbItemDescriptor) iterator.next();
			i++;
			// oDbItemValue.clear;
			try {
				sValue = rs.getString(i);
				sValue = rs.getString(i);
				oDbItemValue.setValueString(sValue);
				if (o.getcolumnTypeSql() == java.sql.Types.INTEGER) {
					iValue = rs.getInt(i);
					oDbItemValue.setValueInt(iValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.DOUBLE) {
					dValue = rs.getDouble(i);
					oDbItemValue.setValueDouble(dValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.FLOAT) {
					fValue = rs.getInt(i);
					oDbItemValue.setValueDouble(fValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.CHAR) {
					sValue = rs.getString(i);
					oDbItemValue.setValueString(sValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.BOOLEAN) {
					bValue = rs.getBoolean(i);
					oDbItemValue.setValueString(sValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.VARCHAR) {
					sValue = rs.getString(i);
					oDbItemValue.setValueString(sValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.NCHAR) {
					sValue = rs.getNString(i);
					oDbItemValue.setValueString(sValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.NVARCHAR) {
					sValue = rs.getNString(i);
					oDbItemValue.setValueString(sValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.LONGNVARCHAR) {
					sValue = rs.getNString(i);
					oDbItemValue.setValueString(sValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.DECIMAL) {
					bdValue = rs.getBigDecimal(i);
					sValue = bdValue.toString();
				}
				if (o.getcolumnTypeSql() == java.sql.Types.DATE) {
					dtValue = rs.getDate(i);
					sValue = dtValue.toString();
					iValue = Integer.parseInt(sValue);
					oDbItemValue.setValueString(sValue);
					oDbItemValue.setValueInt(iValue);
					
				}
				if (o.getcolumnTypeSql() == java.sql.Types.TIME) {
					tmValue = rs.getTime(i);
					sValue = tmValue.toString();
					lValue = Long.parseLong(sValue);	
					oDbItemValue.setValueString(sValue);
					oDbItemValue.setValueInt(iValue);
				}
				if (o.getcolumnTypeSql() == java.sql.Types.TIMESTAMP) {
					tsValue = rs.getTimestamp(i);
				}
				oa_DbItemValue[j++] = oDbItemValue;
			
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				break;
			}			
		}
		
	    return oa_DbItemValue;
	
	}
	
	
	
	/**
	 * @param rowsCount the rowsCount to set
	 */
	public void setRowsCount(int rowsCount) {
		rowsCount = rowsCount;
	}

	/**
	 * @param rowsMax the rowsMax to set
	 */
	public void setRowsMax(int rowsMax) {
		rowsMax = rowsMax;
	}
	
	
}
