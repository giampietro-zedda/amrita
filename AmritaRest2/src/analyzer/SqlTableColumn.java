
package analyzer;
import java.io.Serializable;
import java.util.ArrayList;

import enums.EnumDataItemType;

/**
 * Copyright (c) 2009-2011 e-Amrita - Ing. Giampietro Zedda   Turin (ITALY)
 * 
 * <h1>
 * SqlDescriptorTableColumn
 * </h1>
 * <p>
 * Descrive tutte le informazioni di una colonna di una tabella Sql, a fronte di uno statement CREATE TABLE.br>
 * <p>
 * Le informazioni sui vincoli, come da sintassi, sono codificabili a livello generale di tabella
 * o per ogni singola colonna<br>
 *
 *
 * @author Giampietro Zedda
 * @version 1.0.0
 * @since 01/lug/2011 
 * @see SqlDescriptorTable
 *
*/

/**
 * @author Amrita
 *
 */
public class SqlTableColumn implements Serializable {

 	private static final long serialVersionUID = 1L;
 	
	//////////////////////////////////////////////////////////////////////////
    // Caratteristiche generali colonna
    //////////////////////////////////////////////////////////////////////////
    
	// Nome e tipologia colonna
	private String column= ""; 								   // Nome colonna
    private EnumDataItemType dataType = null;                  // Tipo dato Sql
    private int numDigit = 0;                                  // Numero totale cifre
	private int scale = 0;                                     // Numero totale cifre alla destra del punto virtuale
	private int precision = 0;                                 // Numero digit di precisione per Float
    private String forData = "";                               // FOR SBCS|MIXED|BIT DATA
    private int numChar = 0;                                   // Numero caratteri per Char/Clob
	private String typeUnitSize = "";                          // Per colonne Clob/Blob/Dbclob, vale " ", "K", "M", "G" 
    
	// Opzioni generali e with default
	private boolean isNotNull = false;                         // Colonna obbligatoria
	private boolean isWithDefault = false;                     // WITH DEFAULT
	private boolean isWithDefaultConstant = false;             // WITH DEFAULT constant
	private boolean isWithDefaultUser = false;                 // WITH DEFAULT USER
	private boolean isWithDefaultCurrentSqlId = false;         // WITH DEFAULT CURRENT SQLID
	private boolean isWithDefaultNull = false;                 // WITH DEFAULT NULL
	private boolean isWithDefaultCastFunction = false;         // WITH DEFAULT cast-function-name( ... )
	private boolean isAsSecurityLabel = false;                 // AS SECURITY LABEL
	private boolean isImplicitlyHidden = false;                // IMPLICITLY HIDDEN
	private boolean isWithTimeZone = false;                	   // WITH TIME ZONE
	
	// Valori associati a opzioni e altro
	private String withDefaultValue = "";                      // WITH DEFAULT constant|USER|CURRENT SQLID|NULL
	private String withDefaultCastFunctionName = "";           // cast-function-name (constant|USER|CURRENT SQLID|NULL)
	private String withDefaultCastFunctionValue = "";          // constant|USER|CURRENT SQLID|NULL
	private String xmlTypeModifier = "";                       // data type Xml value
	private int inlineLength = 0;          					   // INLINE LENGTH integer

	// Opzioni generated per colonne a valore automatico
	private boolean isGeneratedAlwais = false;                 // GENERATED ALWAYS
	private boolean isGeneratedByDefault = false;              // GENERATED BY DEFAULT
	private boolean isGeneratedAsIdentity = false;             // GENERATED ... AS IDENTITY
	private boolean isGeneratedAsIdentityCycle = false;        //          (START WITH ... CYCLE ...)
	private boolean isGeneratedAsIdentityNoCycle = false;      //          (START WITH ... NO CYCLE ...)
	private boolean isGeneratedAsIdentityNoCache = false;      //          (START WITH ... NO CACHE ...)
	private boolean isGeneratedAsRowBegin = false;             // GENERATED ... AS ROW BEGIN
	private boolean isGeneratedAsRowEnd = false;               // GENERATED ... AS ROW END
	private boolean isGeneratedAsTransactionStartId = false;   // GENERATED ... AS TRANSACTION START ID
	private boolean isGeneratedForEachRowOnUpdate = false;     // GENERATED ... FOR EACH ROW ON UPDATE AS ROW CHANGE TIMESTAMP
	
	// Valori associati a opzione generated
	private String generatedAsIdentityValue = "";              // (START WITH numeric ...  
	private int generatedAsIdentityStartWith = 0;              //    Numeric constant
	private int generatedAsIdentityIncrBy = 0;             	   //    INCREMENT BY Numeric constant
	private long generatedAsIdentityIncrMaxValue = 0;          //    MAXVALUE numeric constant
	private long generatedAsIdentityIncrMinValue = 0;          //    MINVALUE numeric constant
	private int generatedAsIdentityCache = 0;                  //    CACHE    numeric constant
	
	// Procedure a livello di colonna
 	private String fieldProcProgramName = "";                  // FIELDPROC program-name
    private ArrayList<String> al_fieldProcProgramParms = null; // FIELDPROC program-name ( parms)

    
    //////////////////////////////////////////////////////////////////////////
    // Vincoli (costraints)
    //////////////////////////////////////////////////////////////////////////
    
    // Opzioni vincoli
	private boolean isConstraintPrimaryKey = false;             // Chiave primaria definitga
	private boolean isConstraintUnique = false;                 // Chiave univoca definita in alternativa a primaria
	private boolean isConstraintForeignKey = false;             // Foreign key definita
	private boolean isConstraintCheck = false;                  // Constraint check definito
	
	// Valori associati a opzioni vincoli colonna
	private String constraintName = "";                         // CONSTRAINT name PRIMARY KEY|UNIQUE  |  CONSTRAINT name REFERENCES table-name  |  CONSTRAINT name
	private String constraintReferenceTable = null;				// REFERENCES table-name ... 
	private String constraintReferenceCol = null; 	            // REFERENCES table-name (col)  
	private String constraintReferencesOnDelete = null;         // REFERENCES table-name ... ON DELETE RESTRICT|NO ACTION|CASCADE|SET NULL
	
	
    
	/**
	 * Costruttore 
	 */
	public SqlTableColumn() {
		super();
		 
		al_fieldProcProgramParms = new ArrayList<String> ();   
	}

	/**
	 * Restituisce il nome della colonna.<br>
	 * <p>
	 * 
	 * @return the column
	 */
	public String getColumnName() {
		return column;
	}

	/**
	 * Imposta il nome della colonna.<br>
	 * <p>
	 * @param column the column to set
	 */
	public void setColumnName(String column) {
		this.column = column;
	}

	/**
	 * Restituisce il data type Sql della colonna.<br>
	 * <p>
	 * @return the dataType
	 */
	public EnumDataItemType getDataType() {
		return dataType;
	}

	/**
	 * Imposta il data type Sql della colonna.<br>
	 * <p>
	 * @param dataType the dataType to set
	 */
	public void setDataType(EnumDataItemType dataType) {
		this.dataType = dataType;
	}

	/**
	 * Restituisce true se la colonna è dichiarata <tt>NOT NULL</tt>.<br>
	 * <p>
	 * @return the isNotNull
	 */
	public boolean isNotNull() {
		return isNotNull;
	}

	/**
	 * Imposta se la colonna è dichiarata <tt>NOT NULL</tt>.<br>
	 * <p>
	 * @param isNotNull the isNotNull to set
	 */
	public void setNotNull(boolean isNotNull) {
		this.isNotNull = isNotNull;
	}

	/**
	 * Restituisce true se la colonna è dichiarata <tt>PRIMARY KEY</tt>
	 * con specificazione del nome del vincolo.<br>
	 * <p>
	 * @return the isConstraintPrimaryKey
	 */
	public boolean isConstraintPrimaryKey() {
		return isConstraintPrimaryKey;
	}

	/**
	 * Imposta se la colonna è dichiarata <tt>PRIMARY KEY</tt>
	 * con specificazione del nome del vincolo.<br>
	 * <p>
	 * @param isConstraintPrimaryKey the isConstraintPrimaryKey to set
	 */
	public void setConstraintPrimaryKey(boolean isConstraintPrimaryKey) {
		this.isConstraintPrimaryKey = isConstraintPrimaryKey;
	}

	/**
	 * Restituisce true se la colonna è dichiarata <tt>UNIQUE</tt>
	 * con specificazione del nome del vincolo.<br>
	 * <p>
	 * @return the isConstraintUnique
	 */
	public boolean isConstraintUnique() {
		return isConstraintUnique;
	}

	/**
	 * Imposta se la colonna è dichiarata <tt>UNIQUE</tt>
	 * con specificazione del nome del vincolo.<br>
	 * <p>
	 * @param isConstraintUnique the isConstraintUnique to set
	 */
	public void setConstraintUnique(boolean isConstraintUnique) {
		this.isConstraintUnique = isConstraintUnique;
	}

	/**
	 * @return the isConstraintForeignKey
	 */
	public boolean isConstraintForeignKey() {
		return isConstraintForeignKey;
	}

	/**
	 * @param isConstraintForeignKey the isConstraintForeignKey to set
	 */
	public void setConstraintForeignKey(boolean isConstraintForeignKey) {
		this.isConstraintForeignKey = isConstraintForeignKey;
	}

	/**
	 * Restituisce true se è dichiarata  la clausola<tt>CHECK</tt>
	 * con specificazione del nome del vincolo.<br>
	 * <p>
	 * @return the isConstraintCheck
	 */
	public boolean isConstraintCheck() {
		return isConstraintCheck;
	}

	/**
	 * Imposta se è dichiarata  la clausola<tt>CHECK</tt>
	 * con specificazione del nome del vincolo.<br>
	 * <p>
	 * @param isConstraintCheck the isConstraintCheck to set
	 */
	public void setConstraintCheck(boolean isConstraintCheck) {
		this.isConstraintCheck = isConstraintCheck;
	}

	/**
	 * Restituisce il nome del vincolo<br>
	 * o <tt>UNIQUE</tt><br>
	 * <p>
	 * @return the constraintName
	 */
	public String getConstraintName() {
		return constraintName;
	}

	/**
	 * Imposta il nome del vincolo<br>
	 * <p>
	 * @param constraintName the constraintName to set
	 */
	public void setConstraintName(String constraintName) {
		this.constraintName = constraintName;
	}

	
	/**
	 * Restituisce il nome della tabella referenziata di <tt>FOREIGN KEY</tt><br>
	 * <p>
	 * @return the constraintReferenceTable
	 */
	public String getConstraintReferenceTable() {
		return constraintReferenceTable;
	}

	/**
	 * Imposta il nome della tabella referenziata di <tt>FOREIGN KEY</tt><br>
	 * <p>
	 * @param constraintReferenceTable the constraintReferenceTable to set
	 */
	public void setConstraintReferenceTable(String constraintReferenceTable) {
		this.constraintReferenceTable = constraintReferenceTable;
	}

	/**
	 * Restituisce il nome della colonne della tabella referenziata di <tt>REFERENCES table-name (column-name)</tt><br>
	 * <p>
	 * @return the constraintReferenceCol
	 */
	public String getConstraintReferenceCol() {
		return constraintReferenceCol;
	}

	/**
	 * Imposta il nome della colonne della tabella referenziata di <tt>REFERENCES table-name (column-name)</tt><br>
	 * <p>
	 * @param constraintReferenceCols the constraintReferenceCols to set
	 */
	public void setConstraintReferenceCol(String constraintReferenceCol) {
		this.constraintReferenceCol = constraintReferenceCol;
	}

	/**
	 * Restituisce il tipo di operazione da effettuare a fronte di <tt>REFERENCES table-name (column-name) ON DELETE</tt>
	 * <p>
	 * Si tratta di operazioni quali:<br>
	 * <p>
	 * <tt>RESTRICT</tt><br>
	 * <tt>NO ACTION</tt><br>
	 * <tt>CASCADE</tt><br>
	 * <tt>SET NULL</tt><br>
	 * <p>
	 * 
	 * 
	 * @return the constraintReferencesOnDelete
	 */
	public String getConstraintReferencesOnDelete() {
		return constraintReferencesOnDelete;
	}

	/**
	 * Restituisce il tipo di operazione da effettuare a fronte di <tt>REFERENCES table-name (column-name) ON DELETE</tt>
	 * <p>
	 * Si tratta di operazioni quali:<br>
	 * <p>
	 * <tt>RESTRICT</tt><br>
	 * <tt>NO ACTION</tt><br>
	 * <tt>CASCADE</tt><br>
	 * <tt>SET NULL</tt><br>
	 * <p>
	 * 
	 * 
	 * @param constraintReferencesOnDelete the constraintReferencesOnDelete to set
	 */
	public void setConstraintReferencesOnDelete(String constraintReferencesOnDelete) {
		this.constraintReferencesOnDelete = constraintReferencesOnDelete;
	}

	/**
	 * Restituisce true se è stata dichiarata l'opzione <tt>WITH DEFAULT</tt>
	 * <p>
	 * 
	 * @return the isWithDefault
	 */
	public boolean isWithDefault() {
		return isWithDefault;
	}

	/**
	 * Imposta true se è stata dichiarata l'opzione <tt>WITH DEFAULT</tt>
	 * <p>
	 * 
	 * @param isWithDefault the isWithDefault to set
	 */
	public void setWithDefault(boolean isWithDefault) {
		this.isWithDefault = isWithDefault;
	}

	/**
	 * Restituisce true se è stata dichiarata l'opzione <tt>WITH DEFAULT constant</tt>
	 * <p>
	 * 
	 * @return the isWithDefaultConstant
	 */
	public boolean isWithDefaultConstant() {
		return isWithDefaultConstant;
	}

	/**
	 * Imposta se è stata dichiarata l'opzione <tt>WITH DEFAULT constant</tt>
	 * <p>
	 * 
	 * @param isWithDefaultConstant the isWithDefaultConstant to set
	 */
	public void setWithDefaultConstant(boolean isWithDefaultConstant) {
		this.isWithDefaultConstant = isWithDefaultConstant;
	}

	/**
	 * Restituisce il valore di constant|USER|CURRENT SQLID|NULL espresso da <tt>WITH DEFAULT constant</tt>
	 * <p>
	 * 
	 * @return the withDefaultValue
	 */
	public String getWithDefaultValue() {
		return withDefaultValue;
	}

	/**
	 * Imposta il valore di constant|USER|CURRENT SQLID|NULL espresso da <tt>WITH DEFAULT constant</tt>
	 * <p>
	 * 
	 * @param withDefaultValue the withDefaultValue to set
	 */
	public void setWithDefaultValue(String withDefaultValue) {
		this.withDefaultValue = withDefaultValue;
	}

 
	/**
	 * Restituisce true se è stata dichiarata l'opzione <tt>WITH DEFAULT USER</tt>
	 * <p>
	 * 
	 * @return the isWithDefaultUser
	 */
	public boolean isWithDefaultUser() {
		return isWithDefaultUser;
	}

	/**
	 * Imposta se è stata dichiarata l'opzione <tt>WITH DEFAULT USER</tt>
	 * <p>
	 * 
	 * @param isWithDefaultUser the isWithDefaultUser to set
	 */
	public void setWithDefaultUser(boolean isWithDefaultUser) {
		this.isWithDefaultUser = isWithDefaultUser;
	}

	/**
	 * Restituisce true se è stata dichiarata l'opzione <tt>WITH DEFAULT CURRENT SQLID</tt>
	 * <p>
	 * 
	 * @return the isWithDefaultCurrentSqlId
	 */
	public boolean isWithDefaultCurrentSqlId() {
		return isWithDefaultCurrentSqlId;
	}

	/**
	 * Imposta se è stata dichiarata l'opzione <tt>WITH DEFAULT CURRENT SQLID</tt>
	 * <p>
	 * 
	 * @param isWithDefaultCurrentSqlId the isWithDefaultCurrentSqlId to set
	 */
	public void setWithDefaultCurrentSqlId(boolean isWithDefaultCurrentSqlId) {
		this.isWithDefaultCurrentSqlId = isWithDefaultCurrentSqlId;
	}

	/**
	 * Restituisce true se è stata dichiarata l'opzione <tt>WITH DEFAULT NULL</tt>
	 * <p>
	 * 
	 * @return the isWithDefaultNull
	 */
	public boolean isWithDefaultNull() {
		return isWithDefaultNull;
	}

	/**
	 * Imposta se è stata dichiarata l'opzione <tt>WITH DEFAULT NULL</tt>
	 * <p>
	 * 
	 * @param isWithDefaultNull the isWithDefaultNull to set
	 */
	public void setWithDefaultNull(boolean isWithDefaultNull) {
		this.isWithDefaultNull = isWithDefaultNull;
	}

	/** 
	 * Restituisce true se è stata dichiarata l'opzione <tt>WITH DEFAULT cast-function-name(..)</tt>
	 * <p>
	 * 
	 * @return the isWithDefaultCastFunction
	 */
	public boolean isWithDefaultCastFunction() {
		return isWithDefaultCastFunction;
	}

	/**
	 * Imposta se è stata dichiarata l'opzione <tt>WITH DEFAULT cast-function-name(..)</tt>
	 * <p>
	 * 
	 * @param isWithDefaultCastFunction the isWithDefaultCastFunction to set
	 */
	public void setWithDefaultCastFunction(boolean isWithDefaultCastFunction) {
		this.isWithDefaultCastFunction = isWithDefaultCastFunction;
	}

	
	
	/**
	 * Restituisce se è stata dichiarata l'opzione <tt>AS SECURITY LABEL</tt>
	 * <p>
	 * 
	 * @return the isAsSecurityLabel
	 */
	public boolean isAsSecurityLabel() {
		return isAsSecurityLabel;
	}

	/**
	 * Imposta se è dichiarata l'opzione <tt>AS SECURITY LABEL</tt>
	 * <p>
	 * 
	 * @param isAsSecurityLabel the isAsSecurityLabel to set
	 */
	public void setAsSecurityLabel(boolean isAsSecurityLabel) {
		this.isAsSecurityLabel = isAsSecurityLabel;
	}

	/**
	 * Restituisce se è stata dichiarata l'opzione <tt>HIMPLICITLY HIDDEN</tt>
	 * <p>
	 * 
	 * @return the isImplicitlyHidden
	 */
	public boolean isImplicitlyHidden() {
		return isImplicitlyHidden;
	}

	/**
	 * Imposta se è dichiarata l'opzione <tt>HIMPLICITLY HIDDEN</tt>
	 * <p>
	 * 
	 * @param isImplicitlyHidden the isImplicitlyHidden to set
	 */
	public void setImplicitlyHidden(boolean isImplicitlyHidden) {
		this.isImplicitlyHidden = isImplicitlyHidden;
	}

	/**
	 * Restituisce se è stata dichiarata l'opzione <tt>WITH TIME ZONE</tt>
	 * <p>
	 * 
	 * @return the isWithTimeZone
	 */
	public boolean isWithTimeZone() {
		return isWithTimeZone;
	}

	/**
	 * Imposta se è dichiarata l'opzione <tt>WITH TIME ZONE</tt>
	 * <p>
	 * 
	 * @param isWithTimeZone the isWithTimeZone to set
	 */
	public void setWithTimeZone(boolean isWithTimeZone) {
		this.isWithTimeZone = isWithTimeZone;
	}


	/**
	 * Restituisce il valore del parametro <tt>INLINE LENGTH</tt>
	 * <p>
	 * 
	 * @return the inlineLength
	 */
	public int getInlineLength() {
		return inlineLength;
	}

	/**
	 * Imposta il valore del parametro <tt>INLINE LENGTH</tt>
	 * <p>
	 * 
	 * @param inlineLength the inlineLength to set
	 */
	public void setInlineLength(int inlineLength) {
		this.inlineLength = inlineLength;
	}

	/**
	 * Restituisce il nome della funzione espressa da <tt>WITH DEFAULT cast-function-name(..)</tt>
	 * <p>
	 * 
	 * @return the withDefaultCastFunctionName
	 */
	public String getWithDefaultCastFunctionName() {
		return withDefaultCastFunctionName;
	}

	/**
	 * Imposta il nome della funzione espressa da <tt>WITH DEFAULT cast-function-name(..)</tt>
	 * <p>
	 * 
	 * @param withDefaultCastFunctionName the withDefaultCastFunctionName to set
	 */
	public void setWithDefaultCastFunctionName(String withDefaultCastFunctionName) {
		this.withDefaultCastFunctionName = withDefaultCastFunctionName;
	}

	/**
	 * Restituisce il contenuto della funzione espressa da <tt>WITH DEFAULT cast-function-name(..)</tt>
	 * <p>
	 * Si tratta dei valori:<br>
	 * <p>
	 * constant<br>
	 * USER<br>
	 * CURRENT SQLID<br>
	 * NULL<br>
	 * <p>
	 * 
	 * 
	 * @return the withDefaultCastFunctionValue
	 */
	public String getWithDefaultCastFunctionValue() {
		return withDefaultCastFunctionValue;
	}

	/**
	 * Imposta il contenuto della funzione espressa da <tt>WITH DEFAULT cast-function-name(..)</tt>
	 * <p>
	 * Si tratta dei valori:<br>
	 * <p>
	 * constant<br>
	 * USER<br>
	 * CURRENT SQLID<br>
	 * NULL<br>
	 * <p>
	 * 
	 * @param withDefaultCastFunctionValue the withDefaultCastFunctionValue to set
	 */
	public void setWithDefaultCastFunctionValue(String withDefaultCastFunctionValue) {
		this.withDefaultCastFunctionValue = withDefaultCastFunctionValue;
	}

	/**
	 * Restituisce il contenuto fra parentesi del data type XML</tt>
	 * <p>
	 * Si tratta degli <tt>XMLSCHEMA</tt> specification per la colonna<br>
	 * <p>
	 * @return the xmlTypeModifier
	 */
	public String getXmlTypeModifier() {
		return xmlTypeModifier;
	}

	/**
	 * Imposta il contenuto fra parentesi del data type XML</tt>
	 * <p>
	 * Si tratta degli <tt>XMLSCHEMA</tt> specification per la colonna<br>
	 * <p>
	 * @param xmlTypeModifier the xmlTypeModifier to set
	 */
	public void setXmlTypeModifier(String xmlTypeModifier) {
		this.xmlTypeModifier = xmlTypeModifier;
	}


	/**
	 * Restituisce true se presente l'opzione <tt>GENERATED ALWAYS</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAlwais
	 */
	public boolean isGeneratedAlwais() {
		return isGeneratedAlwais;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ALWAYS</tt>
	 * <p>
	 * 
	 * @param isGeneratedAlwais the isGeneratedAlwais to set
	 */
	public void setGeneratedAlwais(boolean isGeneratedAlwais) {
		this.isGeneratedAlwais = isGeneratedAlwais;
	}

	/**
	 * Restituisce true se presente l'opzione <tt>GENERATED BY DEFAULT</tt>
	 * <p>
	 * 
	 * @return the isGeneratedByDefault
	 */
	public boolean isGeneratedByDefault() {
		return isGeneratedByDefault;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED BY DEFAULT</tt>
	 * <p>
	 * 
	 * @param isGeneratedByDefault the isGeneratedByDefault to set
	 */
	public void setGeneratedByDefault(boolean isGeneratedByDefault) {
		this.isGeneratedByDefault = isGeneratedByDefault;
	}

	/**
	 * Restituisce true se presente l'opzione <tt>GENERATED ... AS identity-clause</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsIdentity
	 */
	public boolean isGeneratedAsIdentity() {
		return isGeneratedAsIdentity;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS (identity-clause)</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsIdentity the isGeneratedAsIdentity to set
	 */
	public void setGeneratedAsIdentity(boolean isGeneratedAsIdentity) {
		this.isGeneratedAsIdentity = isGeneratedAsIdentity;
	}

	/**
	 * Restituisce true se presente l'opzione <tt>GENERATED ... AS (... CYCLE ...)</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsIdentityCycle
	 */
	public boolean isGeneratedAsIdentityCycle() {
		return isGeneratedAsIdentityCycle;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS (... CYCLE ...)</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsIdentityCycle the isGeneratedAsIdentityCycle to set
	 */
	public void setGeneratedAsIdentityCycle(boolean isGeneratedAsIdentityCycle) {
		this.isGeneratedAsIdentityCycle = isGeneratedAsIdentityCycle;
	}

	/**
	 * Restituisce true se presente l'opzione <tt>GENERATED ... AS (... NO CYCLE ...)</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsIdentityNoCycle
	 */
	public boolean isGeneratedAsIdentityNoCycle() {
		return isGeneratedAsIdentityNoCycle;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS (... NO CYCLE ...)</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsIdentityNoCycle the isGeneratedAsIdentityNoCycle to set
	 */
	public void setGeneratedAsIdentityNoCycle(boolean isGeneratedAsIdentityNoCycle) {
		this.isGeneratedAsIdentityNoCycle = isGeneratedAsIdentityNoCycle;
	}

	/**
	 * Restituisce true se presente l'opzione <tt>GENERATED ... AS (... NO CACHE ...)</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsIdentityNoCache
	 */
	public boolean isGeneratedAsIdentityNoCache() {
		return isGeneratedAsIdentityNoCache;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS (... NO CACHE ...)</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsIdentityNoCache the isGeneratedAsIdentityNoCache to set
	 */
	public void setGeneratedAsIdentityNoCache(boolean isGeneratedAsIdentityNoCache) {
		this.isGeneratedAsIdentityNoCache = isGeneratedAsIdentityNoCache;
	}

	
	
	/**
	 * Restituisce se presente l'opzione <tt>GENERATED ... AS ROW BEGIN</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsRowBegin
	 */
	public boolean isGeneratedAsRowBegin() {
		return isGeneratedAsRowBegin;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS ROW BEGIN</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsRowBegin the isGeneratedAsRowBegin to set
	 */
	public void setGeneratedAsRowBegin(boolean isGeneratedAsRowBegin) {
		this.isGeneratedAsRowBegin = isGeneratedAsRowBegin;
	}

	/**
	 * Restituisce se presente l'opzione <tt>GENERATED ... AS ROW END</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsRowEnd
	 */
	public boolean isGeneratedAsRowEnd() {
		return isGeneratedAsRowEnd;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS ROW END</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsRowEnd the isGeneratedAsRowEnd to set
	 */
	public void setGeneratedAsRowEnd(boolean isGeneratedAsRowEnd) {
		this.isGeneratedAsRowEnd = isGeneratedAsRowEnd;
	}

	/**
	 * Restituisce se presente l'opzione <tt>GENERATED ... AS TRANSACTION START ID</tt>
	 * <p>
	 * 
	 * @return the isGeneratedAsTransactionStartId
	 */
	public boolean isGeneratedAsTransactionStartId() {
		return isGeneratedAsTransactionStartId;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... AS TRANSACTION START ID</tt>
	 * <p>
	 * 
	 * @param isGeneratedAsTransactionStartId the isGeneratedAsTransactionStartId to set
	 */
	public void setGeneratedAsTransactionStartId(
			boolean isGeneratedAsTransactionStartId) {
		this.isGeneratedAsTransactionStartId = isGeneratedAsTransactionStartId;
	}

	/**
	 * Restituisce se presente l'opzione <tt>GENERATED ... FOR EACH ROW ON UPDATE AS ROW CHANGE TIMESTAMP</tt>
	 * <p>
	 * 
	 * @return the isGeneratedForEachRowOnUpdate
	 */
	public boolean isGeneratedForEachRowOnUpdate() {
		return isGeneratedForEachRowOnUpdate;
	}

	/**
	 * Imposta se presente l'opzione <tt>GENERATED ... FOR EACH ROW ON UPDATE AS ROW CHANGE TIMESTAMP</tt>
	 * <p>
	 * 
	 * @param isGeneratedForEachRowOnUpdate the isGeneratedForEachRowOnUpdate to set
	 */
	public void setGeneratedForEachRowOnUpdate(boolean isGeneratedForEachRowOnUpdate) {
		this.isGeneratedForEachRowOnUpdate = isGeneratedForEachRowOnUpdate;
	}

	/**
	 * Restituisce il valore completo del contenuto della clausola <tt>GENERATED ... AS (...) fra parentesi.</tt>
	 * <p>
	 * 
	 * @return the generatedAsIdentityValue
	 */
	public String getGeneratedAsIdentityValue() {
		return generatedAsIdentityValue;
	}

	/**
	 * Imposta il valore completo del contenuto della clausola <tt>GENERATED ... AS (...) fra parentesi.</tt>
	 * <p>
	 * 
	 * @param generatedAsIdentityValue the generatedAsIdentityValue to set
	 */
	public void setGeneratedAsIdentityValue(String generatedAsIdentityValue) {
		this.generatedAsIdentityValue = generatedAsIdentityValue;
	}

	/**
	 * Restituisce il valore di START WITH della clausola <tt>GENERATED ... AS (... START WITH numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @return the generatedAsIdentityStartWith
	 */
	public long getGeneratedAsIdentityStartWith() {
		return generatedAsIdentityStartWith;
	}

	/**
	 * Imposta il valore di START WITH della clausola <tt>GENERATED ... AS (... START WITH numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @param generatedAsIdentityStartWith the generatedAsIdentityStartWith to set
	 */
	public void setGeneratedAsIdentityStartWith(int generatedAsIdentityStartWith) {
		this.generatedAsIdentityStartWith = generatedAsIdentityStartWith;
	}

	/**
	 * Restituisce il valore di INCREMENT BY della clausola <tt>GENERATED ... AS (... INCREMENT BY numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @return the generatedAsIdentityIncrBy
	 */
	public int getGeneratedAsIdentityIncrBy() {
		return generatedAsIdentityIncrBy;
	}

	/**
	 * Imposta il valore di INCREMENT BY della clausola <tt>GENERATED ... AS (... INCREMENT BY numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @param generatedAsIdentityIncrBy the generatedAsIdentityIncrBy to set
	 */
	public void setGeneratedAsIdentityIncrBy(int generatedAsIdentityIncrBy) {
		this.generatedAsIdentityIncrBy = generatedAsIdentityIncrBy;
	}

	/**
	 * Restituisce il valore di MAX VALUE della clausola <tt>GENERATED ... AS (... MAX VALUE numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @return the generatedAsIdentityIncrMaxValue
	 */
	public long getGeneratedAsIdentityIncrMaxValue() {
		return generatedAsIdentityIncrMaxValue;
	}

	/**
	 * Imposta il valore di MAX VALUE della clausola <tt>GENERATED ... AS (... MAX VALUE numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @param generatedAsIdentityIncrMaxValue the generatedAsIdentityIncrMaxValue to set
	 */
	public void setGeneratedAsIdentityIncrMaxValue(long generatedAsIdentityIncrMaxValue) {
		this.generatedAsIdentityIncrMaxValue = generatedAsIdentityIncrMaxValue;
	}

	/**
	 * Restituisce il valore di MIN VALUE della clausola <tt>GENERATED ... AS (... MIN VALUE numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @return the generatedAsIdentityIncrMinValue
	 */
	public long getGeneratedAsIdentityIncrMinValue() {
		return generatedAsIdentityIncrMinValue;
	}

	/**
	 * Imposta il valore di MIN VALUE della clausola <tt>GENERATED ... AS (... MIN VALUE numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @param generatedAsIdentityIncrMinValue the generatedAsIdentityIncrMinValue to set
	 */
	public void setGeneratedAsIdentityIncrMinValue(long generatedAsIdentityIncrMinValue) {
		this.generatedAsIdentityIncrMinValue = generatedAsIdentityIncrMinValue;
	}

	/**
	 * Restituisce il valore di MIN VALUE della clausola <tt>GENERATED ... AS (... CACHE numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @return the generatedAsIdentityCache
	 */
	public int getGeneratedAsIdentityCache() {
		return generatedAsIdentityCache;
	}

	/**
	 * Imposta il valore di MIN VALUE della clausola <tt>GENERATED ... AS (... CACHE numeric-constant ...).</tt>
	 * <p>
	 * 
	 * @param generatedAsIdentityIncrMinValue the generatedAsIdentityIncrMinValue to set
	 */
	public void setGeneratedAsIdentityCache(int generatedAsIdentityCache) {
		this.generatedAsIdentityCache = generatedAsIdentityCache;
	}

	/**
	 * Restituisce il nome del programma specificato dalla clausola <tt>FIELDPROC .program-name ( constants ).</tt>
	 * <p>
	 * 
	 * @return the fieldProcProgramName
	 */
	public String getFieldProcProgramName() {
		return fieldProcProgramName;
	}

	/**
	 * Imposta il nome del programma specificato dalla clausola <tt>FIELDPROC .program-name ( constants ).</tt>
	 * <p>
	 * 
	 * @param fieldProcProgramName the fieldProcProgramName to set
	 */
	public void setFieldProcProgramName(String fieldProcProgramName) {
		this.fieldProcProgramName = fieldProcProgramName;
	}

	/**
	 * Restituisce le costanti parametro specificate dalla clausola <tt>FIELDPROC .program-name ( constants ).</tt>
	 * <p>
	 * 
	 * @return the fieldProcProgramParms
	 */
	public ArrayList<String> getFieldProcProgramParms() {
		return al_fieldProcProgramParms;
	}

	/**
	 * Imposta le costanti parametro specificate dalla clausola <tt>FIELDPROC .program-name ( constants ).</tt>
	 * <p>
	 * 
	 * @param fieldProcProgramParms the fieldProcProgramParms to set
	 */
	public void setFieldProcProgramParms(ArrayList<String>  al_fieldProcProgramParms) {
		this.al_fieldProcProgramParms = al_fieldProcProgramParms;
	}

	/**
	 * Restituisce il numero totale di cifre.<br>
	 * <p>
	 * @return the numDigit
	 */
	public int getNumDigit() {
		return numDigit;
	}

	/**
	 * Imposta il numero totale di cifre.<br>
	 * <p>
	 * @param numDigit the numDigits to set
	 */
	public void setNumDigit(int numDigit) {
		this.numDigit = numDigit;
	}

	/**
	 * Restituisce il numero totale di cifre alla destra del punto decimale virtuale.<br>
	 * <p>
	 * @return the scale
	 */
	public int getScale() {
		return scale;
	}

	/**
	 * Restituisce il numero di digit di precisione della colonna FLOAT.<br>
	 * <p>
	 * @return the precision
	 */
	public int getPrecision() {
		return precision;
	}

	/**
	 * Imposta il numero di digit di precisione della colonna FLOAT.<br>
	 * <p>
	 * @param precision the precision to set
	 */
	public void setPrecision(int precision) {
		this.precision = precision;
	}

	/**
	 * Imposta il numero totale di cifre alla destra del punto decimale virtuale.<br>
	 * <p>
	 * @param scale the scale to set
	 */
	public void setScale(int scale) {
		this.scale = scale;
	}

	/**
	 * Restituisce il valore dell'opzione FOR .. DATA<br>
	 * <p>
	 * Se l'opzione non è specificata restituisce "" altrimenti
	 * restituisce SBCS o MIXED o BIT.<br>
	 * <p>
	 * @return the forData
	 */
	public String getForData() {
		return forData;
	}

	/**
	 * Imposta il valore dell'opzione FOR .. DATA<br>
	 * <p>
	 * Se l'opzione non è specificata restituisce "" altrimenti
	 * restituisce SBCS o MIXED o BIT.<br>
	 * <p>
	 * @param forData the forData to set
	 */
	public void setForData(String forData) {
		this.forData = forData;
	}

	/**
	 * Restituisce la lunghezza in caratteri della colonna CHAR/CLOB/BLOB/DBCLOB.<br>
	 * <p>
	 * @return the numChar
	 */
	public int getNumChar() {
		return numChar;
	}

	/**
	 * Imposta la lunghezza in caratteri della colonna CHAR/CLOB/BLOB/DBCLOB.<br>
	 * <p>
	 * @param numChar the numChar to set
	 */
	public void setNumChar(int numChar) {
		this.numChar = numChar;
	}

	/**
	 * Restituisce il tipo di unità intere di lunghezza per colonne  CLOB/BLOB/DBCLOB.<br>
	 * <p>
	 * Si tratta di " " per lunghezza massima, di "K" per K-Bytes,
	 * di "M" per Mega-bytes e di "G" per Giga-Bytes.<br>
	 * <p>
	 * @return the typeUnitSize
	 */
	public String getTypeUnitSize() {
		return typeUnitSize;
	}

	/**
	 * Imposta il tipo di unità intere di lunghezza per colonne CLOB/BLOB/DBCLOB.<br>
	 * <p>
	 * Si tratta di " " per lunghezza massima, di "K" per K-Bytes,
	 * di "M" per Mega-bytes e di "G" per Giga-Bytes.<br>
	 * <p>
	 * @param typeUnitSize the typeUnitSize to set
	 */
	public void setTypeUnitSize(String typeUnitSize) {
		this.typeUnitSize = typeUnitSize;
	}

	

	
}
